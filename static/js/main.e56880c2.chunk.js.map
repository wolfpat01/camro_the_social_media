{"version":3,"sources":["components/objects/user.js","components/helpers/title.js","components/objects/postData.js","components/objects/post.js","components/objects/input.js","components/objects/poster.js","components/communityNews.js","components/nav-Bar.js","App.js","components/login.js","serviceWorker.js","index.js"],"names":["User","props","state","userData","username","pfp","getUserDataSocketWay","getUser","this","token","then","res","JSON","parse","json","setState","socket","io","emit","on","textColor","darkTheme","sm","className","src","alt","additionalCalsses","React","Component","title","PostData","postTitle","postText","Post","postData","getPostDataSocketWay","getPostData","userToken","pannelColor","makeSure","postToken","date","Input","e","onChange","Fragment","type","name","required","display","Poster","handleChange","target","value","content","options","Cookies","get","stringify","onClick","sendPostRequest","Communitytab","posts","getPostsSocketWay","getListPosts","allPosts","newPost","old","push","renderPosts","postsData","loader","slice","reverse","map","key","Menu","expand","Brand","href","Toggle","aria-controls","Collapse","id","Link","App","Login","password","message","data","console","log","set","submit","Register","disabled","length","verifyPassword","status","Logout","logOut","herf","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e56880c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as Bootstrap from \"react-bootstrap\"\r\n\r\nimport { getUser } from \"../helpers/serverHandler\"\r\n\r\nimport io from \"socket.io-client\"\r\n\r\n\r\n\r\nconst white = \"whiteText\";\r\nconst dark = \"darkText\";\r\n\r\nclass User extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { userData: { username: \"LOADING..\", pfp: \"https://png.pngtree.com/png-clipart/20190918/ourmid/pngtree-load-the-3273350-png-image_1733730.jpg\" } };\r\n        this.getUserDataSocketWay()\r\n\r\n    }\r\n    getUserDeta() {\r\n\r\n        getUser(this.props.token).then(res => JSON.parse(res))\r\n            .then(json => this.setState({ userData: json }));\r\n\r\n    }\r\n    getUserDataSocketWay() {\r\n        const socket = io(\"https://glitch.com/~succinct-bead-camelotia:300\");\r\n        if (this.props.token)\r\n            socket.emit(\"userData\", { token: this.props.token })\r\n        socket.on(\"userData\", (userData) => {\r\n            this.setState({ userData: userData })\r\n            //this.state.postData = JSON.parse(userData)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //this.getUserDeta();\r\n\r\n        let textColor = !this.props.darkTheme ? dark : white;\r\n        return (\r\n            <div>\r\n                <Bootstrap.Row>\r\n                    <Bootstrap.Col sm=\"1\">\r\n                        <img className=\"pfp\" src={this.state.userData.pfp} alt=\"Flowers in Chania\" />\r\n                    </Bootstrap.Col>\r\n                    <Bootstrap.Col sm=\"9\">\r\n                        <p className={`${textColor} ${this.props.additionalCalsses || \" \"}`} >{this.state.userData.username}</p>\r\n                    </Bootstrap.Col>\r\n                </Bootstrap.Row>\r\n\r\n            </div >);\r\n    }\r\n}\r\n\r\n\r\nexport default User","import React from \"react\";\r\nimport * as Bootstrap from \"react-bootstrap\"\r\n\r\n\r\n\r\nconst darky = \"bg-secondary\";\r\nconst lighty = \"bg-info\";\r\nconst white = \"whiteText\";\r\nconst dark = \"darkText\";\r\nclass User extends React.Component {\r\n\r\n\r\n    render() {\r\n        let pannelColor = this.props.darkTheme ? darky : lighty;\r\n        let textColor = !this.props.darkTheme ? dark : white;\r\n        return (<h1 className={textColor + \" title\"} >\r\n            {this.props.title}\r\n        </h1>);\r\n    }\r\n}\r\n\r\n\r\nexport default User","import React from \"react\";\r\nimport Title from \"../helpers/title.js\"\r\nclass PostData extends React.Component {\r\n    render() {\r\n        return <div >\r\n            <Title darkTheme={this.props.darkTheme} title={this.props.postTitle}></Title><br />\r\n            <p className=\"postParagraph\">\r\n                {this.props.postText}\r\n            </p>\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default PostData","import React from \"react\";\r\nimport { getPostData } from \"../helpers/serverHandler\"\r\n\r\nimport User from \"./user\";\r\nimport PostData from \"./postData\"\r\nimport \"../../css/post.css\"\r\n\r\n//socket way \r\nimport io from \"socket.io-client\"\r\n\r\n\r\nconst darky = \"pannelDark\";\r\nconst lighty = \"bg-info\";\r\n\r\n\r\nclass Post extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            postData: {\r\n                postText: \"loading..\",\r\n                postTitle: \"Loading..\"\r\n            }\r\n\r\n        }\r\n        this.getPostDataSocketWay();\r\n\r\n    }\r\n    getPostDetails(props) {\r\n        getPostData(this.props.token || \"token\").then((res) => JSON.parse(res)).then((postData) => this.setState({ postData }))\r\n    }\r\n\r\n    getPostDataSocketWay() {\r\n\r\n        const socket = io(\"localhost:80\");\r\n\r\n        socket.emit(\"postData\", { token: this.props.token || \"token\" })\r\n        socket.on(\"postData\", (postData) => {\r\n\r\n            this.setState({ postData: postData })\r\n            //this.state.postData = JSON.parse(postData)\r\n\r\n        })\r\n\r\n\r\n    }\r\n    makeSure() {\r\n\r\n        if (this.state.postData.userToken) {\r\n            return <User token={this.state.postData.userToken} darkTheme={this.props.darkTheme}></User>\r\n        } else { return <p>loading..</p> }\r\n    }\r\n    render() {\r\n        //this.getPostDetails();\r\n        let postToken = \"\"\r\n        let pannelColor = this.props.darkTheme ? darky : lighty;\r\n\r\n        return <div className={pannelColor + \" col-12 postMain\"}>\r\n            {this.makeSure()}\r\n            <div className=\"postback\">\r\n                <PostData postToken={postToken} darkTheme={this.props.darkTheme}\r\n\r\n                    postText={this.state.postData.postText}></PostData>\r\n\r\n            </div>\r\n            <p>{this.state.postData.date}</p>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Post","import React from \"react\"\r\nimport \"../../css/input.css\"\r\nclass Input extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    onChange(e) {\r\n        try {\r\n            this.props.onChange(e)\r\n        } catch{ }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (<React.Fragment>\r\n            <div className=\"group\">\r\n                <input type={this.props.type || \"text\"} name={this.props.name} className=\"inputfeild\" onChange={(e) => this.onChange(e)} required />\r\n                <span className=\"highlight\"></span>\r\n                <span className=\"bar\"></span>\r\n                <label>{this.props.display}</label>\r\n            </div>\r\n        </React.Fragment>)\r\n\r\n\r\n    }\r\n}\r\nexport default Input","import React from \"react\";\r\nimport { sendPostRequest } from \"../helpers/serverHandler\"\r\nimport io from \"socket.io-client\"\r\nimport Cookies from \"js-cookie\"\r\nimport Input from \"./input\"\r\nclass Poster extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            title: \"title\",\r\n            content: \"content\"\r\n        }\r\n    }\r\n    sendPostRequest(e) {\r\n        const options = {\r\n            userToken: Cookies.get(\"userData\"),\r\n            title: this.state.title,\r\n            content: this.state.content,\r\n        }\r\n\r\n        // socket way \r\n        const socket = io(\"localhost:80\");\r\n        socket.emit(\"submitPost\", JSON.stringify(options))\r\n\r\n        /*\r\n                sendPostRequest(options)\r\n        \r\n                this.props.onPost()\r\n                //e.target.disabled = true;\r\n            */\r\n\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div className=\"row container backposter\">\r\n\r\n            <div className=\"col-12 row container discro\">\r\n                <br />\r\n\r\n                <Input type=\"text\" name=\"content\" className=\"col-12\"\r\n                    display=\"what do think of?\"\r\n                    onChange={e => this.handleChange(e)}></Input>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={(e) => this.sendPostRequest(e)}>post</button>\r\n        </div >\r\n    }\r\n}\r\n\r\nexport default Poster","import React from \"react\";\r\n\r\nimport * as Bootstrap from \"react-bootstrap\";\r\n\r\nimport Post from \"./objects/post\"\r\nimport Poster from \"./objects/poster.js\"\r\nimport { getListPosts } from \"./helpers/serverHandler\"\r\n\r\nimport io from \"socket.io-client\"\r\nclass Communitytab extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            posts: []\r\n        }\r\n\r\n\r\n        this.getPostsSocketWay()\r\n    }\r\n    getPosts() {\r\n        getListPosts(this.props.token).then(JSON.parse).then((posts => this.setState({ posts })))\r\n    }\r\n    getPostsSocketWay() {\r\n        const socket = io(\"localhost:80\")\r\n\r\n        socket.emit(\"gimmeStarter\", { token: \"token\" })\r\n        socket.on(\"starter\", (allPosts) => {\r\n\r\n            this.setState({ posts: allPosts })\r\n\r\n        })\r\n        socket.on(\"newPost\", (newPost) => {\r\n            let old = this.state.posts || []\r\n\r\n            old.push(newPost)\r\n            this.setState({ posts: old })\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return <div >\r\n            <Poster token={this.props.token}></Poster>\r\n            news\r\n\r\n            {this.renderPosts(this.state.posts)}\r\n        </div>\r\n    }\r\n\r\n\r\n    renderPosts(postsData) {\r\n\r\n        if (!postsData[0]) {\r\n            return <h2>Loading...</h2>\r\n        }\r\n        let loader = postsData.slice().reverse().map((token) => {\r\n\r\n            return <Post token={token} key={token} darkTheme={this.props.darkTheme} ></ Post >\r\n        })\r\n\r\n        return <Bootstrap.Row>\r\n            {loader}\r\n        </Bootstrap.Row>\r\n    }\r\n}\r\nexport default Communitytab","import React from \"react\"\r\nimport * as Bootstrap from 'react-bootstrap';\r\nimport \"../css/darkMod.css\"\r\n\r\nimport User from \"./objects/user\"\r\n\r\nconst darky = \"pannelDark\";\r\nconst lighty = \"light\";\r\nconst white = \"whiteText\";\r\nconst dark = \"darkText\";\r\n\r\nclass Menu extends React.Component {\r\n  makeSure() {\r\n    if (this.props.token) {\r\n      return <div><User token={this.props.token} darkTheme={this.props.darkTheme} additionalCalsses=\"username\"></User>logout</div>\r\n    } else { return <p>loading..</p> }\r\n  }\r\n  render() {\r\n\r\n    let pannelColor = this.props.darkTheme ? darky : lighty;\r\n    let textColor = !this.props.darkTheme ? dark : white;\r\n    return (\r\n      <Bootstrap.Navbar expand=\"lg\" className={pannelColor + \" col-12 navbar navbar-default navbar-fixed-top\"}>\r\n        <Bootstrap.Navbar.Brand href=\"#home\" className={textColor} >camro</Bootstrap.Navbar.Brand>\r\n        <Bootstrap.Navbar.Toggle aria-controls=\"basic-navbar-nav\" className={textColor} />\r\n        <Bootstrap.Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Bootstrap.Nav className={\"mr-auto \" + textColor} >\r\n            <Bootstrap.Nav.Link href=\"/\" className={textColor} >Home</Bootstrap.Nav.Link>\r\n            <Bootstrap.Nav.Link href=\"/login\" className={textColor} >login</Bootstrap.Nav.Link>\r\n          </Bootstrap.Nav>\r\n\r\n        </Bootstrap.Navbar.Collapse>\r\n        {this.makeSure()}\r\n      </Bootstrap.Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Menu","import React from 'react';\r\n\r\nimport './css/App.css';\r\nimport * as Bootstrap from \"react-bootstrap\"\r\nimport CommunityNews from \"./components/communityNews\"\r\nimport MenuBar from \"./components/nav-Bar\";\r\nimport Cookies from \"js-cookie\"\r\nlet token = Cookies.get(\"userData\")\r\nlet DarkTheme = true\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <MenuBar token={token} darkTheme={DarkTheme} />\r\n      <Bootstrap.Container>\r\n\r\n        <Bootstrap.Row>\r\n          <Bootstrap.Col sm=\"8\">\r\n            <CommunityNews token={token} darkTheme={DarkTheme} />\r\n          </Bootstrap.Col>\r\n        </Bootstrap.Row>\r\n\r\n      </Bootstrap.Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\"\r\nimport io from \"socket.io-client\"\r\n\r\nimport \"./../css/login.css\"\r\n\r\n\r\nimport * as Bootstrap from 'react-bootstrap';\r\nimport Cookies from 'js-cookie';\r\nimport Input from \"./objects/input\"\r\nclass Login extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            message: \"\",\r\n\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    submit() {\r\n        this.state.message = \"\"\r\n        let socket = io(\"https://glitch.com/~succinct-bead-camelotia:300\")\r\n        socket.emit(\"login\", { username: this.state.username, password: this.state.password })\r\n        socket.on(\"message\", data => {\r\n            this.setState({ message: data.message })\r\n            console.log(data)\r\n            if (data.token) {\r\n                Cookies.set(\"userData\", data.token);\r\n                console.log(\"logged In!\")\r\n            }\r\n\r\n\r\n        })\r\n    }\r\n    render() {\r\n        return <React.Fragment> <form className=\" login\">\r\n            <h3 className=\"text-center\">Login</h3>\r\n            <Input name=\"username\" display=\"username\" onChange={(e) => this.handleChange(e)} required></Input><br />\r\n            <Input name=\"password\" type=\"password\" display=\"password\" onChange={(e) => this.handleChange(e)} required></Input><br />\r\n\r\n            <h3 key=\"messenger\">{this.state.message}</h3>\r\n            <button onClick={(e) => this.submit(e)} className='btn btn-primary'>Login</button>\r\n            <Bootstrap.NavLink href=\"/register\">I don't have an account.</Bootstrap.NavLink>\r\n        </form>\r\n\r\n        </React.Fragment>\r\n    }\r\n}\r\nclass Register extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            message: \"\",\r\n            disabled: false\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    submit(e) {\r\n        this.state.message = \"\"\r\n        let socket = io(\"https://glitch.com/~succinct-bead-camelotia:300\")\r\n        if (this.state.username.length < 8) {\r\n            this.setState({ message: \"the length of the username is less then 8\" })\r\n            return\r\n        }\r\n        if (this.state.verifyPassword !== this.state.password) {\r\n            this.setState({ message: \"password is not verified\" })\r\n            return\r\n        }\r\n        if (this.state.password.length < 8) {\r\n            this.setState({ message: \"the length of the password is less then 8\" })\r\n            return\r\n        }\r\n        socket.emit(\"register\", { username: this.state.username, password: this.state.password, pfp: this.state.pfp })\r\n\r\n        socket.on(\"message\", ({ message, status }) => {\r\n            if (status === 200) {\r\n                this.setState({ message, disabled: true })\r\n                // redirect\r\n\r\n            } else {\r\n\r\n                this.setState({ message })\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return <div className=\" login \">\r\n            <h3 className=\"text-center\">Register</h3>\r\n            <Input name=\"pfp\" display=\"link to pfp\" onChange={(e) => this.handleChange(e)}></Input><br />\r\n            <Input name=\"username\" display=\"username\" onChange={(e) => this.handleChange(e)}></Input><br />\r\n            <Input type=\"password\" name=\"password\" display=\"password\" onChange={(e) => this.handleChange(e)}></Input><br />\r\n            <Input type=\"password\" name=\"verifyPassword\" display=\"repeate Password\" onChange={(e) => this.handleChange(e)}></Input><br />\r\n\r\n            <h3>{this.state.message}</h3>\r\n            <button onClick={(e) => this.submit(e)} className='btn btn-primary' disabled={this.state.disabled}>Register</button>\r\n            <Bootstrap.NavLink href=\"/login\">i already have an account.</Bootstrap.NavLink>\r\n        </div >\r\n    }\r\n}\r\n\r\n\r\nclass Logout extends React.Component {\r\n\r\n    logOut() {\r\n        Cookies.set(\"userData\", \"\")\r\n    }\r\n    render() {\r\n        return (<React.Fragment>\r\n            <a>DO you wish to loadout?</a>\r\n            <button onClick={() => this.logOut()} herf=\"/login\">yes</button>\r\n\r\n        </React.Fragment>)\r\n    }\r\n}\r\nexport { Login, Register, Logout }","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './css/index.css';\r\nimport App from './App';\r\nimport { Login, Register, Logout } from \"./components/login\"\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <Route path=\"/register\">\r\n        <Register />\r\n      </Route>\r\n      <Route path=\"/logout\">\r\n        <Logout />\r\n      </Route>\r\n      <Route path=\"/\">\r\n        <App />\r\n      </Route>\r\n    </Switch>\r\n  </Router>\r\n  //\r\n\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}